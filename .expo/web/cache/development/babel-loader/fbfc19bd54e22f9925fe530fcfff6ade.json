{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { UnavailabilityError } from '@unimodules/core';\nimport ExponentFacebook from \"./ExponentFacebook\";\nexport function logInWithReadPermissionsAsync(appId, options) {\n  return _regeneratorRuntime.async(function logInWithReadPermissionsAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          if (ExponentFacebook.logInWithReadPermissionsAsync) {\n            _context.next = 2;\n            break;\n          }\n\n          throw new UnavailabilityError('Facebook', 'logInWithReadPermissionsAsync');\n\n        case 2:\n          if (typeof appId !== 'string') {\n            console.warn(\"logInWithReadPermissionsAsync: parameter 'appId' must be a string, was '\" + typeof appId + \"''.\");\n            appId = String(appId);\n          }\n\n          if (!options || typeof options !== 'object') {\n            options = {};\n          }\n\n          return _context.abrupt(\"return\", ExponentFacebook.logInWithReadPermissionsAsync(appId, options));\n\n        case 5:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}","map":{"version":3,"sources":["../src/Facebook.ts"],"names":[],"mappings":";AAAA,SAAS,mBAAT,QAAoC,kBAApC;AAEA,OAAO,gBAAP;AAYA,OAAO,SAAe,6BAAf,CACL,KADK,EAEL,OAFK;AAAA;AAAA;AAAA;AAAA;AAAA,cAIA,gBAAgB,CAAC,6BAJjB;AAAA;AAAA;AAAA;;AAAA,gBAKG,IAAI,mBAAJ,CAAwB,UAAxB,EAAoC,+BAApC,CALH;;AAAA;AAOL,cAAI,OAAO,KAAP,KAAiB,QAArB,EAA+B;AAC7B,YAAA,OAAO,CAAC,IAAR,8EAC6E,OAAO,KADpF;AAGA,YAAA,KAAK,GAAG,MAAM,CAAC,KAAD,CAAd;AACD;;AAED,cAAI,CAAC,OAAD,IAAY,OAAO,OAAP,KAAmB,QAAnC,EAA6C;AAC3C,YAAA,OAAO,GAAG,EAAV;AACD;;AAhBI,2CAiBE,gBAAgB,CAAC,6BAAjB,CAA+C,KAA/C,EAAsD,OAAtD,CAjBF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { UnavailabilityError } from '@unimodules/core';\n\nimport ExponentFacebook from './ExponentFacebook';\n\nexport type FacebookLoginResult = {\n  type: string;\n  token?: string;\n  expires?: number;\n};\n\nexport type FacebookOptions = {\n  permissions?: string[];\n};\n\nexport async function logInWithReadPermissionsAsync(\n  appId: string,\n  options?: FacebookOptions\n): Promise<FacebookLoginResult> {\n  if (!ExponentFacebook.logInWithReadPermissionsAsync) {\n    throw new UnavailabilityError('Facebook', 'logInWithReadPermissionsAsync');\n  }\n  if (typeof appId !== 'string') {\n    console.warn(\n      `logInWithReadPermissionsAsync: parameter 'appId' must be a string, was '${typeof appId}''.`\n    );\n    appId = String(appId);\n  }\n\n  if (!options || typeof options !== 'object') {\n    options = {};\n  }\n  return ExponentFacebook.logInWithReadPermissionsAsync(appId, options);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}